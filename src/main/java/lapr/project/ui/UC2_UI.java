/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr.project.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import lapr.project.controller.UC2_Controller;
import lapr.project.model.Encryption;
import lapr.project.model.Event;
import lapr.project.model.EventCenter;
import lapr.project.model.FAE;
import lapr.project.model.User;
import lapr.project.utils.ExportData;

/**
 *
 * @author Luis
 */
public class UC2_UI extends javax.swing.JFrame {

    static final long serialVersionUID = -3387516993124229948L;

    /**
     * The instance of the EventCenter
     */
    private EventCenter ec;

    /**
     * The instance of the controller
     */
    private UC2_Controller c;

    /**
     * The user that is using this UC right now
     */
    private User u;

    private Event eventSelected;
<<<<<<< HEAD
    private User userSelected;
    private List<User> selected = new ArrayList<>();
    private List<User> users = new ArrayList<>();
=======
    private List<FAE> usersSelected = new ArrayList<>();

>>>>>>> 453f7e32b296b66c182dca5a97386a6ea4e423df

    /**
     * Creates new form UC2_UI
     *
     * @param ec the instance of the eveentcenter
     * @param u the user using the window
     */
    public UC2_UI(EventCenter ec, User u) {

        this.ec = ec;
        this.c = new UC2_Controller(ec);
        this.u = u;

        initComponents();
        this.setVisible(true);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (JOptionPane.showConfirmDialog(UC2_UI.this, "Do you wish to exit without saving?", "Close", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                    try {
                        ExportData.serialization(ec);
                    } catch (Exception ex) {
                        Logger.getLogger(UC2_UI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    new OrganizerActions_UI(ec, u);
                    dispose();
                }
            }
        });
        
        userList.getSelectionModel().setSelectionInterval(0, 2);
    }

    private String[] eventList() {

        String[] list = new String[ec.getEventsWhereUserIsOrganizer(u).size()];
        int cont = 0;

        for (Event e : ec.getEventsWhereUserIsOrganizer(u)) {

            list[cont] = e.getTitle();
            cont++;

        }
        return list;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userListUI = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList<>();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        pickedListUI = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UC2 - Define FAE");

        jLabel1.setText("Choose an Event:");

        jLabel3.setText("Pick exactly 2 users to be FAE:");

        userListUI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListUIMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(userListUI);

        eventList.setModel(new javax.swing.AbstractListModel<String>() {
            static final long serialVersionUID = -3387516993124229948L;
            String[] strings = eventList();
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        eventList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(eventList);

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        pickedListUI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pickedListUIMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(pickedListUI);

        jLabel2.setText("Already picked users:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(confirmButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(91, 91, 91)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(cancelButton))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (JOptionPane.showConfirmDialog(UC2_UI.this, "Do you wish to exit cancel the operation?", "Cancel", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            new OrganizerActions_UI(ec, u);
            dispose();
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void eventListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventListMouseClicked

<<<<<<< HEAD
        this.selected = new ArrayList<>();
=======
        this.usersSelected = new ArrayList<>();
        
>>>>>>> 453f7e32b296b66c182dca5a97386a6ea4e423df
        this.eventSelected = ec.getEventRegister().getEventByTitle(eventList.getSelectedValue());

        userListUI.setModel(new javax.swing.AbstractListModel<String>() {
            static final long serialVersionUID = -3387516993124229948L;
            String[] strings = modelList();

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }//GEN-LAST:event_eventListMouseClicked

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
//        if (selected.size() == 2) {
//            if (JOptionPane.showConfirmDialog(UC2_UI.this, "Do you confirm your decision?", "Define FAE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
//                for (FAE fae : selected) {
//                    eventSelected.getFaeList().getFAEList().add(fae);
//                    new OrganizerActions_UI(ec, u);
//                    dispose();
//                }
//            } else {
//                new OrganizerActions_UI(ec, u);
//                dispose();
//            }
//        } else {
//            JOptionPane.showMessageDialog(UC2_UI.this, "You should choose exactly 2 FAE", "Error", JOptionPane.OK_OPTION);
//        }


        if (usersSelected.size() == 2) {
            if (JOptionPane.showConfirmDialog(UC2_UI.this, "Do you confirm your decision?", "Define FAE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
<<<<<<< HEAD
                for (User user : selected) {
                    eventSelected.getFaeList().getFAEList().add(new FAE(user));
                }
                new OrganizerActions_UI(ec, u);
                dispose();
            } else {
                new OrganizerActions_UI(ec, u);
                dispose();
            }
        } else {
            JOptionPane.showMessageDialog(UC2_UI.this, "You should choose exactly 2 FAE", "Error", JOptionPane.OK_OPTION);
=======
                for (FAE fae : usersSelected) {
                    eventSelected.getFaeList().getFAEList().add(fae);
                    new OrganizerActions_UI(ec, u);
                    dispose();
                }
>>>>>>> 453f7e32b296b66c182dca5a97386a6ea4e423df
        }

        }


    }//GEN-LAST:event_confirmButtonActionPerformed
    /**
     * This method gets the list of users that aren't FAE's or Organizers of
     * this Event
     *
     * @return returns the array of Strings
     */
    private String[] modelList() {

        for (User user : ec.getUserRegister().getUsers()) {
            if (!(eventSelected.checkIFUserIsOrganizer(user)) && !(eventSelected.checkIFUserIsFAE(user))) {
                users.add(user);
            }
        }

        String[] list = new String[users.size()];

        for (int i = 0; i < list.length; i++) {
            String name = Encryption.deEncryptPassword(users.get(i).getName(), ec.getEncryptionRegister().getEncryptionByUser(users.get(i)).getShift(), Encryption.ABC);
            name = Encryption.deEncryptData(name, ec.getEncryptionRegister().getEncryptionByUser(users.get(i)).getKeyword());
            name = name + " (" + users.get(i).getUsername() + ")";
            list[i] = name;
        }

        this.users = users;

        return list;
    }

    private void userListUIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListUIMouseClicked

        this.userSelected = users.get(userListUI.getSelectedIndex());

<<<<<<< HEAD
        if (selected.contains(userSelected)) {
            JOptionPane.showMessageDialog(UC2_UI.this, "You already selected this user");
            return;
        }

        if (selected.size() == 2) {
            JOptionPane.showMessageDialog(UC2_UI.this, "Only 2 FAE's allowed per event");
            return;
        }

        if (JOptionPane.showConfirmDialog(UC2_UI.this, "Do you wish to define this user as FAE?", "Define", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {

            selected.add(userSelected);

            pickedListUI.setModel(new javax.swing.AbstractListModel<String>() {
                static final long serialVersionUID = -3387516993124229948L;
                String[] picked = pickedUserNames();

                public int getSize() {
                    return picked.length;
                }

                public String getElementAt(int index) {
                    return picked[index];
                }

            });
        }


    }//GEN-LAST:event_userListUIMouseClicked

    private void pickedListUIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pickedListUIMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pickedListUIMouseClicked

    private String[] pickedUserNames() {
        String[] list = new String[selected.size()];

        for (int i = 0; i < list.length; i++) {
            String name = Encryption.deEncryptPassword(selected.get(i).getName(), ec.getEncryptionRegister().getEncryptionByUser(selected.get(i)).getShift(), Encryption.ABC);
            name = Encryption.deEncryptData(name, ec.getEncryptionRegister().getEncryptionByUser(selected.get(i)).getKeyword());
            name = name + " (" + selected.get(i).getUsername() + ")";
            list[i] = name;
        }
        return list;
    }
=======
        
        
        
        this.usersSelected.add(nameStringToFae(userList.getSelectedValue()));
        
        
            
        
        
        
        
        //if (JOptionPane.showConfirmDialog(UC2_UI.this, "Do you wish to define this user as FAE?", "Define", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {

//            this.userSelected = nameStringToFae(userList.getSelectedValue());
//         
//            .setSelectionBackground(Color.GREEN);
//            selected.add(userSelected);
      //  }
    }//GEN-LAST:event_userListMouseClicked
>>>>>>> 453f7e32b296b66c182dca5a97386a6ea4e423df

    /**
     * This method returns the User that is selected in the user List in the
     * form of FAE
     *
     * @param name the name displayed in the JList
     * @return returns the new instance of FAE
     */
    public FAE nameStringToFae(String name) {

        String c;
        int count = 0;
        String username;

        do {
            c = name.substring(count, count + 1);
            count++;
        } while (!c.equals("("));

        username = name.substring(count, name.length() - 1);

        User org = null;

        for (User u : ec.getUserRegister().getUsers()) {
            if (username.equals(u.getUsername())) {
                org = u;
                break;
            }
        }

        return new FAE(org);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JList<String> eventList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> pickedListUI;
    private javax.swing.JList<String> userListUI;
    // End of variables declaration//GEN-END:variables
}
